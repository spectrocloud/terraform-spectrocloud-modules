name: vsphere-with-creds-infra
description: ""
type: cluster
cloudType: vsphere
packs:
  - name: sles-vsphere
    type: spectro
    layer: os
    registry: Public Repo
    version: 15.3
    tag: 15.3
    values: |-
        kubeadmconfig:
          preKubeadmCommands:
          - echo "Executing pre kube admin config commands"
          - update-ca-certificates
          - 'systemctl restart containerd; sleep 3'
          - 'while [ ! -S /var/run/containerd/containerd.sock ]; do echo "Waiting for containerd..."; sleep 1; done'
          postKubeadmCommands:
          - echo "Executing post kube admin config commands"
          files:
          - targetPath: /usr/share/pki/trust/anchors/ca.crt
            targetOwner: "root:root"
            targetPermissions: "0644"
            content: |
              -----BEGIN CERTIFICATE-----
              MIIDozCCAougAwIBAgIQeO8XlqAMLhxvtCap35yktzANBgkqhkiG9w0BAQsFADBS
              MQswCQYDVQQGEwJVUzEhMB8GA1UEChMYR2VuZXJhbCBFbGVjdHJpYyBDb21wYW55
              MSAwHgYDVQQDExdHRSBFeHRlcm5hbCBSb290IENBIDIuMTAeFw0xNTAzMDUwMDAw
              MDBaFw0zNTAzMDQyMzU5NTlaMFIxCzAJBgNVBAYTAlVTMSEwHwYDVQQKExhHZW5l
              cmFsIEVsZWN0cmljIENvbXBhbnkxIDAeBgNVBAMTF0dFIEV4dGVybmFsIFJvb3Qg
              Q0EgMi4xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzCzT4wNRZtr2
              XTzoTMjppjulZfG35/nOt44q2zg47sxwgZ8o4qjcrwzIhsntoFrRQssjXSF5qXdC
              zsm1G7f04qEBimuOH/X+CidWX+sudCS8VyRjXi9cyvUW4/mYKCLXv5M6HhEoIHCD
              Xdo6yUr5mSrf18qRR3yUFz0HYXopa2Ls3Q6lBvEUO2Xw04vqVvmg1h7S5jYuZovC
              oIbd2+4QGdoSZPgtSNpCxSR+NwtPpzYZpmqiUuDGfVpO3HU42APB0c60D91cJho6
              tZpXYHDsR/RxYGm02K/iMGefD5F4YMrtoKoHbskty6+u5FUOrUgGATJJGtxleg5X
              KotQYu8P1wIDAQABo3UwczASBgNVHRMBAf8ECDAGAQH/AgECMA4GA1UdDwEB/wQE
              AwIBBjAuBgNVHREEJzAlpCMwITEfMB0GA1UEAxMWR0UtUm9vdC1DT00tUlNBLTIw
              NDgtMTAdBgNVHQ4EFgQU3N2mUCJBCLYgtpZyxBeBMJwNZuowDQYJKoZIhvcNAQEL
              BQADggEBACF4Zsf2Nm0FpVNeADUH+sl8mFgwL7dfL7+6n7hOgH1ZXcv6pDkoNtVE
              0J/ZPdHJW6ntedKEZuizG5BCclUH3IyYK4/4GxNpFXugmWnKGy2feYwVae7Puyd7
              /iKOFEGCYx4C6E2kq3aFjJqiq1vbgSS/B0agt1D3rH3i/+dXVxx8ZjhyZMuN+cgS
              pZL4gnhnSXFAGissxJhKsNkYgvKdOETRNn5lEgfgVyP2iOVqEguHk2Gu0gHSouLu
              5ad/qyN+Zgbjx8vEWlywmhXb78Gaf/AwSGAwQPtmQ0310a4DulGxo/kcuS78vFH1
              mwJmHm9AIFoqBi8XpuhGmQ0nvymurEk=
              -----END CERTIFICATE-----
  - name: kubernetes
    type: spectro
    layer: k8s
    registry: Public Repo
    version: 1.21.10
    tag: 1.21.10
    values: |-
      pack:
        k8sHardening: True
        #CIDR Range for Pods in cluster
        # Note : This must not overlap with any of the host or service network
        podCIDR: "172.30.0.0/16"
        #CIDR notation IP range from which to assign service cluster IPs
        # Note : This must not overlap with any IP ranges assigned to nodes for pods.
        serviceClusterIpRange: "11.0.0.0/22"

      # KubeAdm customization for kubernetes hardening. Below config will be ignored if k8sHardening property above is disabled
      kubeadmconfig:
        apiServer:
          certSANs:
          - "cluster-{{ .spectro.system.cluster.uid }}.{{ .spectro.system.reverseproxy.server }}"
          extraArgs:
            # Note : secure-port flag is used during kubeadm init. Do not change this flag on a running cluster
            secure-port: "6443"
            anonymous-auth: "true"
            insecure-port: "0"
            profiling: "false"
            disable-admission-plugins: "AlwaysAdmit"
            default-not-ready-toleration-seconds: "60"
            default-unreachable-toleration-seconds: "60"
            enable-admission-plugins: "NamespaceLifecycle,ServiceAccount,NodeRestriction,PodSecurityPolicy"
            audit-log-path: /var/log/apiserver/audit.log
            audit-policy-file: /etc/kubernetes/audit-policy.yaml
            audit-log-maxage: "30"
            audit-log-maxbackup: "10"
            audit-log-maxsize: "100"
            authorization-mode: RBAC,Node
            tls-cipher-suites: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
          extraVolumes:
            - name: audit-log
              hostPath: /var/log/apiserver
              mountPath: /var/log/apiserver
              pathType: DirectoryOrCreate
            - name: audit-policy
              hostPath: /etc/kubernetes/audit-policy.yaml
              mountPath: /etc/kubernetes/audit-policy.yaml
              readOnly: true
              pathType: File
        controllerManager:
          extraArgs:
            profiling: "false"
            terminated-pod-gc-threshold: "25"
            pod-eviction-timeout: "1m0s"
            use-service-account-credentials: "true"
            feature-gates: "RotateKubeletServerCertificate=true"
        scheduler:
          extraArgs:
            profiling: "false"
        kubeletExtraArgs:
          read-only-port : "0"
          event-qps: "0"
          feature-gates: "RotateKubeletServerCertificate=true"
          protect-kernel-defaults: "true"
          tls-cipher-suites: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
        files:
          - path: hardening/audit-policy.yaml
            targetPath: /etc/kubernetes/audit-policy.yaml
            targetOwner: "root:root"
            targetPermissions: "0600"
          - path: hardening/privileged-psp.yaml
            targetPath: /etc/kubernetes/hardening/privileged-psp.yaml
            targetOwner: "root:root"
            targetPermissions: "0600"
          - path: hardening/90-kubelet.conf
            targetPath: /etc/sysctl.d/90-kubelet.conf
            targetOwner: "root:root"
            targetPermissions: "0600"
        preKubeadmCommands:
          # For enabling 'protect-kernel-defaults' flag to kubelet, kernel parameters changes are required
          - 'echo "====> Applying kernel parameters for Kubelet"'
          - 'sysctl -p /etc/sysctl.d/90-kubelet.conf'
        postKubeadmCommands:
          # Apply the privileged PodSecurityPolicy on the first master node ; Otherwise, CNI (and other) pods won't come up
          # Sometimes api server takes a little longer to respond. Retry if applying the pod-security-policy manifest fails
          - 'export KUBECONFIG=/etc/kubernetes/admin.conf && [ -f "$KUBECONFIG" ] && { echo " ====> Applying PodSecurityPolicy" ; until $(kubectl apply -f /etc/kubernetes/hardening/privileged-psp.yaml > /dev/null ); do echo "Failed to apply PodSecurityPolicies, will retry in 5s" ; sleep 5 ; done ; } || echo "Skipping PodSecurityPolicy for worker nodes"'

      # Client configuration to add OIDC based authentication flags in kubeconfig
      #clientConfig:
        #oidc-issuer-url: "{{ .spectro.pack.kubernetes.kubeadmconfig.apiServer.extraArgs.oidc-issuer-url }}"
        #oidc-client-id: "{{ .spectro.pack.kubernetes.kubeadmconfig.apiServer.extraArgs.oidc-client-id }}"
        #oidc-client-secret: 1gsranjjmdgahm10j8r6m47ejokm9kafvcbhi3d48jlc3rfpprhv
        #oidc-extra-scope: profile,email
  - name: cni-calico
    type: spectro
    layer: cni
    registry: Public Repo
    version: 3.19.0
    tag: 3.19.0
    values: |-
      pack:
        content:
          images:
            - image: gcr.io/spectro-images-public/calico/kube-controllers:v3.19.0
            - image: gcr.io/spectro-images-public/calico/node:v3.19.0
            - image: gcr.io/spectro-images-public/calico/cni:v3.19.0
            - image: gcr.io/spectro-images-public/calico/pod2daemon-flexvol:v3.19.0
  
      manifests:
        calico:
  
          # IPAM type to use. Supported types are calico-ipam, host-local
          ipamType: "calico-ipam"
  
          # Should be one of CALICO_IPV4POOL_IPIP or CALICO_IPV4POOL_VXLAN
          encapsulationType: "CALICO_IPV4POOL_IPIP"
  
          # Should be one of Always, CrossSubnet, Never
          encapsulationMode: "Always"

  - name: csi-vsphere-csi
    type: spectro
    layer: csi
    registry: Public Repo
    version: 2.3.0
    tag: 2.3.0
    values: |-
      pack:
        content:
          images:
            - image: k8s.gcr.io/sig-storage/csi-attacher:v3.2.0
            - image: quay.io/k8scsi/csi-resizer:v1.1.0
            - image: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.3.0
      
      manifests:
        #Storage class config
        vsphere:
      
          #Toggle for Default class
          isDefaultClass: "false"
      
          #Specifies file system type
          fstype: "ext4"
      
          #Allowed reclaim policies are Delete, Retain
          reclaimPolicy: "Delete"
      
          #Specifies the URL of the datastore on which the container volume needs to be provisioned.
          datastoreURL: ""
      
          #Specifies the storage policy for datastores on which the container volume needs to be provisioned.
          storagePolicyName: ""
      
          volumeBindingMode: "WaitForFirstConsumer"
      
          #Set this flag to true to enable volume expansion
          allowVolumeExpansion: true
      
        vsphere-cloud-controller-manager:
          k8sVersion: "{{ .spectro.system.kubernetes.version }}"
